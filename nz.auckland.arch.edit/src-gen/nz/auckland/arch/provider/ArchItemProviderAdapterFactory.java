/**
 */
package nz.auckland.arch.provider;

import java.util.ArrayList;
import java.util.Collection;

import nz.auckland.arch.util.ArchAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArchItemProviderAdapterFactory extends ArchAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArchItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.DesignModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DesignModelItemProvider designModelItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.DesignModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDesignModelAdapter() {
		if (designModelItemProvider == null) {
			designModelItemProvider = new DesignModelItemProvider(this);
		}

		return designModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorItemProvider connectorItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorAdapter() {
		if (connectorItemProvider == null) {
			connectorItemProvider = new ConnectorItemProvider(this);
		}

		return connectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.Channel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelItemProvider channelItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.Channel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelAdapter() {
		if (channelItemProvider == null) {
			channelItemProvider = new ChannelItemProvider(this);
		}

		return channelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.RoleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleTypeItemProvider roleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.RoleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleTypeAdapter() {
		if (roleTypeItemProvider == null) {
			roleTypeItemProvider = new RoleTypeItemProvider(this);
		}

		return roleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.ConnectorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorTypeItemProvider connectorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.ConnectorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorTypeAdapter() {
		if (connectorTypeItemProvider == null) {
			connectorTypeItemProvider = new ConnectorTypeItemProvider(this);
		}

		return connectorTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.ComponentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentTypeItemProvider componentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.ComponentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentTypeAdapter() {
		if (componentTypeItemProvider == null) {
			componentTypeItemProvider = new ComponentTypeItemProvider(this);
		}

		return componentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.PortType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortTypeItemProvider portTypeItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.PortType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortTypeAdapter() {
		if (portTypeItemProvider == null) {
			portTypeItemProvider = new PortTypeItemProvider(this);
		}

		return portTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.ArchStyle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArchStyleItemProvider archStyleItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.ArchStyle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArchStyleAdapter() {
		if (archStyleItemProvider == null) {
			archStyleItemProvider = new ArchStyleItemProvider(this);
		}

		return archStyleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.BehaviourProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviourPropertyItemProvider behaviourPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.BehaviourProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviourPropertyAdapter() {
		if (behaviourPropertyItemProvider == null) {
			behaviourPropertyItemProvider = new BehaviourPropertyItemProvider(this);
		}

		return behaviourPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.LTLNestedExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LTLNestedExprItemProvider ltlNestedExprItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.LTLNestedExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLTLNestedExprAdapter() {
		if (ltlNestedExprItemProvider == null) {
			ltlNestedExprItemProvider = new LTLNestedExprItemProvider(this);
		}

		return ltlNestedExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.LTLRegularExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LTLRegularExprItemProvider ltlRegularExprItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.LTLRegularExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLTLRegularExprAdapter() {
		if (ltlRegularExprItemProvider == null) {
			ltlRegularExprItemProvider = new LTLRegularExprItemProvider(this);
		}

		return ltlRegularExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.StructuralProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuralPropertyItemProvider structuralPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.StructuralProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuralPropertyAdapter() {
		if (structuralPropertyItemProvider == null) {
			structuralPropertyItemProvider = new StructuralPropertyItemProvider(this);
		}

		return structuralPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.Device} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeviceItemProvider deviceItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.Device}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeviceAdapter() {
		if (deviceItemProvider == null) {
			deviceItemProvider = new DeviceItemProvider(this);
		}

		return deviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.ExecutionEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionEnvironmentItemProvider executionEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.ExecutionEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutionEnvironmentAdapter() {
		if (executionEnvironmentItemProvider == null) {
			executionEnvironmentItemProvider = new ExecutionEnvironmentItemProvider(this);
		}

		return executionEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.CommunicationLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationLinkItemProvider communicationLinkItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.CommunicationLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationLinkAdapter() {
		if (communicationLinkItemProvider == null) {
			communicationLinkItemProvider = new CommunicationLinkItemProvider(this);
		}

		return communicationLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.CommunicationPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommunicationPortItemProvider communicationPortItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.CommunicationPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommunicationPortAdapter() {
		if (communicationPortItemProvider == null) {
			communicationPortItemProvider = new CommunicationPortItemProvider(this);
		}

		return communicationPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.OntologyLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OntologyLabelItemProvider ontologyLabelItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.OntologyLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOntologyLabelAdapter() {
		if (ontologyLabelItemProvider == null) {
			ontologyLabelItemProvider = new OntologyLabelItemProvider(this);
		}

		return ontologyLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.MigrationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MigrationModelItemProvider migrationModelItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.MigrationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMigrationModelAdapter() {
		if (migrationModelItemProvider == null) {
			migrationModelItemProvider = new MigrationModelItemProvider(this);
		}

		return migrationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.InterimModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterimModelItemProvider interimModelItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.InterimModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterimModelAdapter() {
		if (interimModelItemProvider == null) {
			interimModelItemProvider = new InterimModelItemProvider(this);
		}

		return interimModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.RefactorPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefactorPartItemProvider refactorPartItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.RefactorPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefactorPartAdapter() {
		if (refactorPartItemProvider == null) {
			refactorPartItemProvider = new RefactorPartItemProvider(this);
		}

		return refactorPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nz.auckland.arch.RefactorSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefactorSetItemProvider refactorSetItemProvider;

	/**
	 * This creates an adapter for a {@link nz.auckland.arch.RefactorSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefactorSetAdapter() {
		if (refactorSetItemProvider == null) {
			refactorSetItemProvider = new RefactorSetItemProvider(this);
		}

		return refactorSetItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (componentItemProvider != null)
			componentItemProvider.dispose();
		if (designModelItemProvider != null)
			designModelItemProvider.dispose();
		if (connectorItemProvider != null)
			connectorItemProvider.dispose();
		if (portItemProvider != null)
			portItemProvider.dispose();
		if (eventItemProvider != null)
			eventItemProvider.dispose();
		if (roleItemProvider != null)
			roleItemProvider.dispose();
		if (channelItemProvider != null)
			channelItemProvider.dispose();
		if (roleTypeItemProvider != null)
			roleTypeItemProvider.dispose();
		if (connectorTypeItemProvider != null)
			connectorTypeItemProvider.dispose();
		if (componentTypeItemProvider != null)
			componentTypeItemProvider.dispose();
		if (portTypeItemProvider != null)
			portTypeItemProvider.dispose();
		if (archStyleItemProvider != null)
			archStyleItemProvider.dispose();
		if (behaviourPropertyItemProvider != null)
			behaviourPropertyItemProvider.dispose();
		if (ltlNestedExprItemProvider != null)
			ltlNestedExprItemProvider.dispose();
		if (ltlRegularExprItemProvider != null)
			ltlRegularExprItemProvider.dispose();
		if (structuralPropertyItemProvider != null)
			structuralPropertyItemProvider.dispose();
		if (deviceItemProvider != null)
			deviceItemProvider.dispose();
		if (executionEnvironmentItemProvider != null)
			executionEnvironmentItemProvider.dispose();
		if (communicationLinkItemProvider != null)
			communicationLinkItemProvider.dispose();
		if (communicationPortItemProvider != null)
			communicationPortItemProvider.dispose();
		if (ontologyLabelItemProvider != null)
			ontologyLabelItemProvider.dispose();
		if (migrationModelItemProvider != null)
			migrationModelItemProvider.dispose();
		if (interimModelItemProvider != null)
			interimModelItemProvider.dispose();
		if (refactorPartItemProvider != null)
			refactorPartItemProvider.dispose();
		if (refactorSetItemProvider != null)
			refactorSetItemProvider.dispose();
	}

}
